## Bit manipulation

Range = [-2^(n-1) , 2^(n-1)-1] , n = no of bits

Integer -> 32 bits  [- 2^31 , 2^31 - 1]
Long -> 64 bits [-2^63 , 2^63-1]

/***********************************************************************/ 

# Operators

|(OR) , &(And), ^(Xor) , <<(Left Shift) , >> (Right Shift) , >>> (Triple right shift) , ~ (1's conplement) 
, -x(2's complement) 


1) OR(|) operator :

a | 1 = 1 (switch bits on)
a | 0 = a

therefore "1" is powerful in "or".

2) AND(&) operator :

a & 0 = 0 (switch bits off)
a & 1 = a

therefore "0" is powerful in "and".

3) Xor(^) operator :

a ^ 1 = ~a (toggle bits)
a ^ 0 = a

therefore "1" is powerful in "xor".

4) Left Shift( << ) operator :

->    x = 00101011
->     x << 3

->   x = "001"(drop) +  "01011" <--- 000( i.e adding 0 , 3 times from left and droping last 3 bits from right)
->   x = "01011"+ "000"
->   x = 01011000

5) Right Shift ( >> ) operator :

->    x = 10101011
->     x >> 3 

->   x =  msbBit(1) 3 times -> "111"(add) + "10101" + "011"(drop) 
->   x = 11110101

? always add msb bit

6) Triple Right Shift ( >>> ) operator :

->   x = 10101011
->   x >>> 3

->   x = "000"(3) times -> "000"(add) + "10101 + "011" (drop)
->   x = 00010101

? always add 0

7) 1's complement( ~ ) operator :

 ? toggle bits

8) 2's complement (-) operator :

x -> -x 


/***********************************************************************/


##  Bit Masking

1) on bit  (|)                                     

x    = 1 0 1 1 *0 1 0 1

mask = 0 0 0 0  1 0 0 0 -> (1 << 3)

x | mask 

2) off bit (&)

x    = 1 0 1 *1 0 1 0 1

mask = 1 1 1  0 1 1 1 1 -> ~ (1 << 4)

x &= mask 

3) toggle bit (xor)

x    = 1 0 1 *1 0 1 0 1

mask = 0 0 0  1 0 0 0 0 -> (1 << 4)

x ^= mask

4) check bit (&)

x    = 1 0 1 *1 0 1 0 1

mask = 0 0 0  1 0 0 0 0

x &= mask != 0 then "on" else "off"

/***********************************************************************/

## RMSB(Right Most Set Bit Mask)

int rmsb = x & -x

"Proof" : 
x = A (0's 1's) 1 B(0's)
~x = A(1's 0's) 0 B(1's)
~x + 1 = A(1's 0's) 1 B(0's)

x & (~x + 1) = A (0's) 1 B(0's) => x & -x

/***********************************************************************/

## STL for bit manipulation

1) Convert decimal to Binary

int num = 10;
string s = bitset<32>(num).to_string();
cout << s << "\n";

2) Convert Binary to decimal

# method - 1:

string binary = "0111";
int ans = bitset<32>(binary).to_ulong();
cout << ans << "\n";

# method - 2

string binary = "0110";
int a = stoll(binary, nullptr, 2);
cout << a << "\n";

3) count set bits

__builtin_popcount: Integer
__builtin_popcountll : long long

int x = 10, cnt = 0;
while(x != 0){
  int rmsb = x & -x;
  x ^= rmsb;
  cnt++;
}
cout << cnt << "\n";

/***********************************************************************/

# famous mask using hexadecimal numbers

0101010... -> 0x55555555 (5 -> 8 times as 5 is stored as 0101 in hexadecimal)

1010101... -> 0xAAAAAAAA (A -> 8 times as A is stored as 1010 in hexadecimal)

/***********************************************************************/


# note :
1)
if a % b == 0, then binary of a % binary of b == 0

example to check is the binary string is multiple of 3. 
check if the string itself is multiple of (11 -> (3 = 011)).

2)

a <= b <= c

then,
->  (a ^ b) < (a ^ c) or (b ^ c) < (a ^ c)

proof: try using pen and paper



/***********************************************************************/
















